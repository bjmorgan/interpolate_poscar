#! /home/morgan/bin/ruby/bin/ruby

class Poscar

  attr_accessor :coordinates

  def initialize( filename )
    read_from( filename )
  end

  def read_from( filename )
    input = File.new( filename, 'r').readlines
    @title = input.shift
    @scaling = input.shift
    @lattice = input.shift(3)
    @atoms = input.shift.split
    @atom_numbers = input.shift.split.map{ |s| s.to_i }
    @coordinate_type = input.shift
    @coordinates = []
    total_atom_number = @atom_numbers.inject(0) { |sum, n| sum + n }
    total_atom_number.times { |i| @coordinates << input.shift.split.map { |s| s.to_f } }
  end

  def output
    puts @title
    puts @scaling
    puts @lattice
    puts @atoms.join(' ')
    puts @atom_numbers.map{ |i| i.to_s }.join(' ')
    puts @coordinate_type
    @coordinates.each{ |coord| puts coord.map{ |f| f.to_s }.join(' ') }
  end

  def self.interpolate( poscar1, poscar2 )
    new_poscar = poscar1
    # should test that the two poscars are compatible
    # ignoring periodic boundary conditions and minimum image convention
    new_poscar.coordinates = poscar1.coordinates.zip( poscar2.coordinates ).map do |coords1, coords2|
      coords1.zip(coords2).map{ |r1,r2| (r1 + r2) / 2.0 }
    end
    return new_poscar
  end

end

poscar1 = Poscar.new( ARGV[0] )
poscar2 = Poscar.new( ARGV[1] )

interpolated_poscar = Poscar.interpolate( poscar1, poscar2 )
interpolated_poscar.output
